openapi: "3.0.2"
info:
  title: KAIA Open API
  version: "1.10.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:7151

paths:
  /subbridge/getBridgeInformation:
    post:
      summary: "subbridge_getBridgeInformation"
      tags:
        - subbridge
      operationId: getBridgeInformation
      description: |
        The subbridge_getBridgeInformation returns the information of the given bridge contract.

        **JSONRPC:** `subbridge_getBridgeInformation`

      parameters:
        - name: account
          required: true
          in: query
          schema:
            type: string
            format: 20-byte DATA
          description: Address of a bridge contract

      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../../components/requests/JsonRpcRequest.yaml#/components/schemas/JsonRpcRequest"
                - $ref: "#/components/schemas/GetBridgeInformationReq"

      responses:
        200:
          description: returns the information of the given bridge contract.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "../../components/responses/JsonRpcResponse.yaml#/components/schemas/JsonRpcResponse"
                  - $ref: "#/components/schemas/GetBridgeInformationResp"

      x-codeSamples:
        - lang: "Shell"
          label: "Curl"
          source:
            $ref: "../../code-samples/curl/subbridge/getBridgeInformation.sh"
        # - lang: "Java"
        #   label: "Java"
        #   source:
        #     $ref: ""
        # - lang: "JavaScript"
        #   label: "Javascript"
        #   source:
        #     $ref: "../../../code-samples/javascript/eth/miscellaneous/getBridgeInformation.js"
        # - lang: "Python"
        #   label: "Python"
        #   source:
        #     $ref: "../../../code-samples/python/eth/miscellaneous/getBridgeInformation.py"

components:
  schemas:
    GetBridgeInformationReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: 'subbridge_getBridgeInformation'
        params:
          type: array
          items:
            type: string
            title: account
            format: 20-byte DATA
          description: Address of a bridge contract
          example: ["0x27caeba831d98b5fbb1d81ce0ed20801702f443a"]

    GetBridgeInformationResp:
      type: object
      properties:
        result:
          type: object
          description: the information of the given bridge contract.
          required:
            - counterPart
            - isRunning
            - isSubscribed
            - onServiceChain
            - pendingEventSize
            - requestNonce
            - handleNonce
            - lowerHandleNonce
          properties:
            counterPart:
              type: string
              format: 20-byte DATA
              description: Address of the counterpart bridge contract. (Not supported yet)
            isRunning:
              type: boolean
              description: true if the bridge contract is running, false otherwise.
            isSubscribed:
              type: boolean
              description: true if the bridge contract is subscribed, false otherwise.
            onServiceChain:
              type: boolean
              description: true if the bridge contact is on child (service) chain, false otherwise.
            pendingEventSize:
              type: string
              format: hex
              description: Number of pending "request value transfer" events generated by the bridge contracts, not handled yet by the sub-bridge.
            requestNonce:
              type: string
              format: hex
              description: Request nonce of the bridge contract.
            handleNonce:
              type: string
              format: hex
              description: Upper handle nonce of the bridge contract.
            lowerHandleNonce:
              type: string
              format: hex
              description: Lower handle nonce of the bridge contract.
          example: {
            counterPart: "0x0000000000000000000000000000000000000000",
            handleNonce: 0,
            lowerHandleNonce: 0,
            isRunning: true,
            isSubscribed: true,
            onServiceChain: true,
            pendingEventSize: 0,
            requestNonce: 0
          }