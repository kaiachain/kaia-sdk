{{>licenseInfo}}

{{! NOTE-Klaytn: The "optional" parameter must present in the JSON-RPC body anyway. Hence they are actually "required".
    Instead of marking them required in the YAML spec, we handle them in the generated code. It is a JavaScript-specific problem.

    Because of how openapi-generator works, we have to take out the optional parameters from the "opts".
    See https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JavascriptClientCodegen.java
    and https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/Javascript/libraries/javascript/api.mustache

    Unlike the original openapi-generator, the "opts" can be an Object or an Array for the convenience of @kaiachain/js-ext-core:promisifyMethod.
    See https://github.com/klaytn/web3klaytn/blob/main/js-ext-core/src/util/openapi.ts }}

{{=< >=}}
import ApiClient from "../ApiClient";

<#emitJSDoc>/**
 * <baseName> service.
 * @module <#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><classname>
 * @version <&projectVersion>
 */</emitJSDoc>
export default class <&classname> {

    <#emitJSDoc>/**
     * Constructs a new <&classname>. <#description>
     * <description></description>
     * @alias module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><classname>
     * @class
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient#instance} if unspecified.
     */</emitJSDoc>
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

<#operations><#operation><#emitJSDoc><^usePromises>
    /**
     * Callback function to receive the result of the <&operationId> operation.
     * @callback module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<&operationId>Callback
     * @param {String} error Error message, if any.
     * @param {String} response The complete HTTP response.
     */</usePromises>

    /**<#summary>
     * <&summary></summary><#notes>
     * <&notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <&paramName> <&description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<&paramName> <&description><#defaultValue> (default to <&.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<&operationId>Callback} callback The callback function, accepting three arguments: error, data, response
     * </usePromises>
     */
</emitJSDoc>    
    <operationId><#usePromises>WithHttpInfo</usePromises>(<vendorExtensions.x-codegen-arg-list>) {
        <#vendorExtensions.x-codegen-has-optional-params>
        opts = opts || {};
        </vendorExtensions.x-codegen-has-optional-params>
<#allParams>
<#required>
        // verify the required parameter '<paramName>' is set
        if (<paramName> === undefined || <paramName> === null) {
            throw new Error("Missing the required parameter '<paramName>' when calling <operationId>");
        }
</required>
</allParams>

        let optsIndex = 0;
        const postBody = {};
        
        <#tags>
        postBody['method'] = "<&name>_<operationId>";
        </tags>
        postBody['id'] = 1;
        postBody['jsonrpc'] = '2.0';
        postBody['params'] = [];
        
    <#queryParams>
    <#required>
        postBody.params.push(<paramName>);</required>
        <^required>
        var defaultValue = null;
        <#vendorExtensions.x-default-latest>defaultValue = "latest";</vendorExtensions.x-default-latest>
        <#vendorExtensions.x-default-emptyobj>defaultValue = {};</vendorExtensions.x-default-emptyobj>

        var optParam = opts['<paramName>'] || opts[optsIndex++] || defaultValue;
        if (optParam === undefined || optParam === null) {
            throw new Error("Missing the required parameter '<paramName>' when calling <operationId>");
        }
        postBody.params.push(optParam);
    </required>
    </queryParams>

        let authNames = [<#authMethods>'<name>'<^-last>, </-last></authMethods>];
        let contentTypes = [<#consumes>'<& mediaType>'<^-last>, </-last></consumes>];
        let accepts = [<#produces>'<& mediaType>'<^-last>, </-last></produces>];
        let returnType = "object";
        
        return this.apiClient.callApi(
            '<&path>', '<httpMethod>', null, null, null, null,
            postBody, authNames, contentTypes, accepts, returnType, null<^usePromises>, callback</usePromises>
        );
    }
<#usePromises>
<#emitJSDoc>

    /**<#summary>
     * <&summary></summary><#notes>
     * <&notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <&paramName> <&description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<&paramName> <&description><#defaultValue> (default to <&.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<&operationId>Callback} callback The callback function, accepting three arguments: error, data, response
     * </usePromises>
     */
</emitJSDoc>
    <operationId>(<vendorExtensions.x-codegen-arg-list>) {
        return this.<operationId>WithHttpInfo(<vendorExtensions.x-codegen-arg-list>)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }
</usePromises>
</operation></operations>

}
<={{ }}=>
