openapi: "3.0.2"
info:
  title: KAIA Open API
  version: "1.10.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:7151

paths:
  /debug/vMTracing/traceTransaction:
    post:
      summary: "[Trace] debug_traceTransaction"
      tags:
        - debug
      operationId: traceTransaction
      description: |
        The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.

        **JSONRPC:** `debug_traceTransaction`

      parameters:
        - name: txHash
          in: query
          description: The hash of the transaction.
          required: true
          schema:
            type: string
            format: hex
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: "../../../components/schemas/common/Common.yaml#/components/schemas/TracingOptions"

      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../../../components/requests/JsonRpcRequest.yaml#/components/schemas/JsonRpcRequest"
                - $ref: "#/components/schemas/DebugTraceTransactionReq"

      responses:
        200:
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "../../../components/responses/JsonRpcResponse.yaml#/components/schemas/JsonRpcResponse"
                  - $ref: "#/components/schemas/DebugTraceTransactionResp"

      x-codeSamples:
        - lang: "Shell"
          label: "Curl"
          source:
            $ref: "../../../code-samples/curl/debug/vMTracing/traceTransaction.sh"
        - lang: "Java"
          label: "Java"
          source:
            $ref: "../../../code-samples/java/src/main/java/opensdk/sdk/apis/debug/vMTracing/DebugTraceTransactionExample.java"
        - lang: "JavaScript"
          label: "Javascript"
          source:
           $ref: "../../../code-samples/javascript/debug/vMTracing/traceTransaction.js"
        - lang: "Python"
          label: "Python"
          source:
            $ref: "../../../code-samples/python/debug/vMTracing/traceTransaction.py"

components:
  schemas:
    DebugTraceTransactionReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceTransaction
        params:
          type: array
          items:
            properties:
              TxHash:
                title: TxHash
                type: string
                description: The hash of the transaction.
                example: "0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09"
              TracingOptions:
                $ref: "../../../components/schemas/common/Common.yaml#/components/schemas/TracingOptions"
          example: ["0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09"]

    DebugTraceTransactionResp:
      type: object
      properties:
        result:
          type: object
          description: The structured logs created during the execution of KLVM.
          required:
            - failed
            - gas
            - returnValue
            - structLogs
          properties:
            failed:
              type: boolean
            gas:
              type: integer
            returnValue:
              type: string
            structLogs:
              type: array
              items:
                $ref: "#/components/schemas/StructLogs"
          example: {
                    failed: false,
                    gas: 28110,
                    returnValue: "",
                    structLogs: [{
                        computation: 149999880,
                        computationCost: 120,
                        depth: 1,
                        gas: 6710,
                        gasCost: 3,
                        memory: [],
                        op: "PUSH1",
                        pc: 0,
                        stack: [],
                        storage: {}
                    }, {
                        computation: 149999760,
                        computationCost: 120,
                        depth: 1,
                        gas: 6707,
                        gasCost: 3,
                        memory: [],
                        op: "PUSH1",
                        pc: 2,
                        stack: ["0000000000000000000000000000000000000000000000000000000000000080"],
                        storage: {}
                    }, {
                    ...
                    }, {
                        computation: 149965613,
                        computationCost: 0,
                        depth: 1,
                        gas: 0,
                        gasCost: 0,
                        memory: ["0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000080", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000002"],
                        op: "STOP",
                        pc: 176,
                        stack: ["00000000000000000000000000000000000000000000000000000000d09de08a"],
                        storage: {
                          0000000000000000000000000000000000000000000000000000000000000000: "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                    }]
                  }
    StructLogs:
      title: StructLogs
      type: object
      properties:
        computation:
          type: number
        computationCost:
          type: number
        depth:
          type: number
        gas:
          type: number
        gasCost:
          type: number
        memory:
          type: array
          items:
            type: string
        op:
          type: string
        pc:
          type: number
        stack:
          type: array
          items:
            type: string
          description: The status of the response
        storage:
          type: object
          description: The status of the response