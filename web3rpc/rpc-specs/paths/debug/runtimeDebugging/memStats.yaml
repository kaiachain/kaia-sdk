openapi: "3.0.2"
info:
  title: KAIA OPEN API
  version: "1.10.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:7151

paths:
  /debug/runtimeDebugging/memStats:
    post:
      operationId: memStats
      summary: "[runtimeDebug] debug_memStats"
      description: |
        Returns detailed runtime memory statistics.

        **JSONRPC:** `debug_memStats`

      tags:
        - debug

      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../../../components/requests/JsonRpcRequest.yaml#/components/schemas/JsonRpcRequest"
                - $ref: "#/components/schemas/MemStatsReq"

      responses:
        200:
          description: Returns detailed runtime memory statistics.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "../../../components/responses/JsonRpcResponse.yaml#/components/schemas/JsonRpcResponse"
                  - $ref: "#/components/schemas/MemStatsResp"

      x-codeSamples:
        - lang: "Shell"
          label: "Curl"
          source:
            $ref: "../../../code-samples/curl/debug/runtimeDebugging/memStats.sh"
        - lang: "Java"
          label: "Java"
          source:
            $ref: "../../../code-samples/java/src/main/java/opensdk/sdk/apis/debug/runtimeDebugging/DebugMemStatsExample.java"
        - lang: "JavaScript"
          label: "Javascript"
          source:
            $ref: "../../../code-samples/javascript/debug/runtimeDebugging/memStats.js"
        - lang: "Python"
          label: "Python"
          source:
            $ref: "../../../code-samples/python/debug/runtimeDebugging/memStats.py"

components:
  schemas:
    MemStatsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: 'debug_memStats'

    MemStatsResp:
      type: object
      properties:
        result:
            type: object
            required:
              - Alloc
              - TotalAlloc
              - Sys
              - Lookups
              - Mallocs
              - Frees
              - HeapAlloc
              - HeapSys
              - HeapIdle
              - HeapInuse
              - HeapReleased
              - HeapObjects
              - StackInuse
              - StackSys
              - MSpanSys
              - MSpanInuse
              - MCacheSys
              - BuckHashSys
              - GCSys
              - OtherSys
              - NextGC
              - LastGC
              - PauseTotalNs
              - PauseNs
              - PauseEnd
              - NumGC
              - NumForcedGC
              - GCCPUFraction
              - EnableGC
              - DebugGC
              - BySize
            description: Returns detailed runtime memory statistics.
            properties:
              Alloc:
                type: string
                description: Alloc is bytes of allocated heap objects. This is the same as HeapAlloc
              TotalAlloc:
                type: string
                description: TotalAlloc is cumulative bytes allocated for heap objects. TotalAlloc increases as heap objects are allocated, but unlike Alloc and HeapAlloc, it does not decrease when objects are freed.
              Sys:
                type: string
                description: Sys is the total bytes of memory obtained from the OS. Sys is the sum of the XSys fields below. Sys measures the virtual address space reserved by the Go runtime for the heap, stacks, and other internal data structures. It's likely that not all of the virtual address space is backed by physical memory at any given moment, though in general it all was at some point.
              Lookups:
                type: string
                description: Lookups is the number of pointer lookups performed by the runtime. This is primarily useful for debugging runtime internals
              Mallocs:
                type: string
                description: Mallocs is the cumulative count of heap objects allocated. The number of live objects is Mallocs - Frees.
              Frees:
                type: string
                description: Frees is the cumulative count of heap objects freed.
              HeapAlloc:
                type: string
                description: HeapAlloc is bytes of allocated heap objects. "Allocated" heap objects include all reachable objects, as well as unreachable objects that the garbage collector has not yet freed. Specifically, HeapAlloc increases as heap objects are allocated and decreases as the heap is swept and unreachable objects are freed. Sweeping occurs incrementally between GC cycles, so these two processes occur simultaneously, and as a result HeapAlloc tends to change smoothly (in contrast with the sawtooth that is typical of stop-the-world garbage collectors).
              HeapSys:
                type: string
                description: HeapSys is bytes of heap memory obtained from the OS. HeapSys measures the amount of virtual address space reserved for the heap. This includes virtual address space that has been reserved but not yet used, which consumes no physical memory, but tends to be small, as well as virtual address space for which the physical memory has been returned to the OS after it became unused (see HeapReleased for a measure of the latter). HeapSys estimates the largest size the heap has had.
              HeapIdle:
                type: string
                description: HeapIdle is bytes in idle (unused) spans. Idle spans have no objects in them. These spans could be (and may already have been) returned to the OS, or they can be reused for heap allocations, or they can be reused as stack memory. HeapIdle minus HeapReleased estimates the amount of memory that could be returned to the OS, but is being retained by the runtime so it can grow the heap without requesting more memory from the OS. If this difference is significantly larger than the heap size, it indicates there was a recent transient spike in live heap size.
              HeapInuse:
                type: string
                description: HeapInuse is bytes in in-use spans. In-use spans have at least one object in them. These spans can only be used for other objects of roughly the same size. HeapInuse minus HeapAlloc estimates the amount of memory that has been dedicated to particular size classes, but is not currently being used. This is an upper bound on fragmentation, but in general this memory can be reused efficiently.
              HeapReleased:
                type: string
                description:  HeapReleased is bytes of physical memory returned to the OS. This counts heap memory from idle spans that was returned to the OS and has not yet been reacquired for the heap.
              HeapObjects:
                type: string
                description: HeapObjects is the number of allocated heap objects. Like HeapAlloc, this increases as objects are allocated and decreases as the heap is swept and unreachable objects are freed
              StackInuse:
                type: string
                description: StackInuse is bytes in stack spans. In-use stack spans have at least one stack in them. These spans can only be used for other stacks of the same size. There is no StackIdle because unused stack spans are returned to the heap (and hence counted toward HeapIdle).
              StackSys:
                type: string
                description: StackSys is bytes of stack memory obtained from the OS. StackSys is StackInuse, plus any memory obtained directly from the OS for OS thread stacks (which should be minimal).
              MSpanSys:
                type: string
                description: MSpanSys is bytes of memory obtained from the OS for mspan structures.
              MSpanInuse:
                type: string
                description: MCacheInuse is bytes of allocated mcache structures.
              MCacheSys:
                type: string
                description: MCacheSys is bytes of memory obtained from the OS for mcache structures.
              BuckHashSys:
                type: string
                description: BuckHashSys is bytes of memory in profiling bucket hash tables.
              GCSys:
                type: string
                description: GCSys is bytes of memory in garbage collection metadata.
              OtherSys:
                type: string
                description: OtherSys is bytes of memory in miscellaneous off-heap runtime allocations.
              NextGC:
                type: string
                description: NextGC is the target heap size of the next GC cycle. The garbage collector's goal is to keep HeapAlloc â‰¤ NextGC. At the end of each GC cycle, the target for the next cycle is computed based on the amount of reachable data and the value of GOGC.
              LastGC:
                type: string
                description: LastGC is the time the last garbage collection finished, as nanoseconds since 1970 (the UNIX epoch).
              PauseTotalNs:
                type: string
                description: PauseTotalNs is the cumulative nanoseconds in GC stop-the-world pauses since the program started. During a stop-the-world pause, all goroutines are paused and only the garbage collector can run.
              PauseNs:
                type: array
                items:
                  type: string
                description: PauseNs is a circular buffer of recent GC stop-the-world pause times in nanoseconds. The most recent pause is at PauseNs[(NumGC+255)%256]. In general, PauseNs[N%256] records the time paused in the most recent N%256th GC cycle. There may be multiple pauses per GC cycle; this is the sum of all pauses during a cycle.
              PauseEnd:
                type: array
                items:
                  type: string
                description: PauseEnd is a circular buffer of recent GC pause end times, as nanoseconds since 1970 (the UNIX epoch). This buffer is filled the same way as PauseNs. There may be multiple pauses per GC cycle; this records the end of the last pause in a cycle.
              NumGC:
                type: string
                description: NumGC is the number of completed GC cycles.
              NumForcedGC:
                type: string
                description: NumForcedGC is the number of GC cycles that were forced by the application calling the GC function.
              GCCPUFraction:
                type: string
                description: GCCPUFraction is the fraction of this program's available CPU time used by the GC since the program started. GCCPUFraction is expressed as a number between 0 and 1, where 0 means GC has consumed none of this program's CPU. A program's available CPU time is defined as the integral of GOMAXPROCS since the program started. That is, if GOMAXPROCS is 2 and a program has been running for 10 seconds, its "available CPU" is 20 seconds. GCCPUFraction does not include CPU time used for write barrier activity. This is the same as the fraction of CPU reported by GODEBUG=gctrace=1.
              EnableGC:
                type: boolean
                description: EnableGC indicates that GC is enabled. It is always true, even if GOGC=off.
              DebugGC:
                type: boolean
                description: DebugGC is currently unused.
              BySize:
                type: array
                description: BySize reports per-size class allocation statistics. BySize[N] gives statistics for allocations of size S where BySize[N-1].Size < S â‰¤ BySize[N].Size. This does not report allocations larger than BySize[60].Size.
                items:
                  type: object
                  properties:
                    Size:
                      type: string
                      description: Size is the maximum byte size of an object in this size class.
                    Mallocs:
                      type: string
                      description: Mallocs is the cumulative count of heap objects allocated in this size class. The cumulative bytes of allocation is Size*Mallocs. The number of live objects in this size class is Mallocs - Frees.
                    Frees:
                      type: string
                      description: Frees is the cumulative count of heap objects freed in this size class.
            example:
                {
                  Alloc: 132244280,
                  BuckHashSys: 1922010,
                  BySize: [{
                      Frees: 0,
                      Mallocs: 0,
                      Size: 0
                  }, {
                      Frees: 496599,
                      Mallocs: 499580,
                      Size: 8
                  },
                  ...],
                  StackSys: 1195456,
                  Sys: 107909880,
                  TotalAlloc: 2105944960
                }
