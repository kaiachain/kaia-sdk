/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.jvm.tasks.Jar
import org.jetbrains.kotlin.compiler.plugin.cliPluginUsageString

buildscript {
    val openApiGeneratorVersion: String by project
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
        }
    }
    dependencies {
        classpath("org.openapitools:openapi-generator-gradle-plugin:$openApiGeneratorVersion")
    }
}

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.22"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

val openApiGeneratorVersion: String by project
val kotestVersion: String by project

apply(plugin = "org.openapi.generator")

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
    }
}

dependencies {
    // openapi generator
    implementation("org.openapitools:openapi-generator:$openApiGeneratorVersion")
    implementation("org.openapitools:openapi-generator-cli:$openApiGeneratorVersion")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the kotest for BDD
    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$kotestVersion")
    testImplementation("io.kotest:kotest-property:$kotestVersion")
}

tasks.withType<Test>().configureEach {
    useJUnitPlatform()
//    testLogging.events = setOf(TestLogEvent.PASSED, TestLogEvent.FAILED, TestLogEvent.STARTED, TestLogEvent.SKIPPED)
    testLogging.events = setOf(TestLogEvent.FAILED, TestLogEvent.STANDARD_ERROR, TestLogEvent.STANDARD_OUT)
    reports {
        junitXml.required.set(true)
    }
}

tasks.withType<Jar>() {
    manifest {
        attributes["Main-Class"] =
            "org.openapitools.codegen.OpenAPIGenerator" // fully qualified class name of default main class
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.get().output)
//    from(zipTree("$buildDir/../../bin/openapi-generator-cli-$openApiGeneratorVersion.jar"))
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })
}

tasks.register<Copy>("deployJar") {
    dependsOn("clean")
    dependsOn("jar")
    from("$buildDir/libs/web3rpc-openapi-generator-cli.jar")
    into("$buildDir/../../bin/libs/")
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
